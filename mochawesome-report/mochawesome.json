{
  "stats": {
    "suites": 5,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-30T12:26:19.556Z",
    "end": "2020-08-30T12:26:19.616Z",
    "duration": 60,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1d45a03a-6d96-4892-b737-2dee8408f6b9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "79666b7f-638b-4e6d-b730-be21d20b7e3d",
          "title": "Task : API Testing",
          "fullFile": "D:\\Reflektion\\Test\\TestAPI.js",
          "file": "\\Test\\TestAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8796aa5c-33e6-42b2-9f87-9c1ca6a9e089",
              "title": "Testing Get service : ",
              "fullFile": "D:\\Reflektion\\Test\\TestAPI.js",
              "file": "\\Test\\TestAPI.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Task 1 = Verify Get service for /post URI",
                  "fullTitle": "Task : API Testing Testing Get service :  Task 1 = Verify Get service for /post URI",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .get('/posts')\n            .expect(200) // Verify the response status code\n            .end(function(err,res){\n                if(!err){\n                    // verify the schema\n                    var data = (res.body)\n                    data.forEach((item)=>{\n                        chai.expect(item).to.have.all.keys('userId','id','title','body')\n                    }) \n                    // verify that API returns at least 100 records \n                    chai.expect(res.body).to.have.length.least(100)\n                }\n                else\n                {\n                    console.log(err)\n                }\n            })",
                  "err": {},
                  "uuid": "b6da6373-a30d-46ba-bc24-53e951bd2cf3",
                  "parentUUID": "8796aa5c-33e6-42b2-9f87-9c1ca6a9e089",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Task 2 = Verify Get service for /post/1 URI",
                  "fullTitle": "Task : API Testing Testing Get service :  Task 2 = Verify Get service for /post/1 URI",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .get('/posts/1')\n            .expect(200) // verify that status code is 200\n            .end(function(err,res){\n                if(!err){\n                    // verify the schema\n                    chai.expect(res.body).to.have.all.keys('userId','id','title','body') \n                    // verify that id in response matches the input (1) \n                    chai.expect(res.body).to.have.property('id',1)\n                }\n                else\n                {\n                    console.log(err)\n                }\n            })",
                  "err": {},
                  "uuid": "407823fe-e371-457e-b93d-ea71596fa8f8",
                  "parentUUID": "8796aa5c-33e6-42b2-9f87-9c1ca6a9e089",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Task 3 = Verify Get service for /invalidposts URI",
                  "fullTitle": "Task : API Testing Testing Get service :  Task 3 = Verify Get service for /invalidposts URI",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .get('/invalidposts')\n            .expect(404) // verify that status code is 404\n            .end(function(err,res){\n                if(!err){\n                    //Log request and response\n                        console.log('request param : ' + JSON.stringify(server.get('invalidposts'),null,2))\n                        console.log('response param : ' + res.body)\n                }\n            })",
                  "err": {},
                  "uuid": "54a2b6e4-b126-4168-8efa-3e3122b37246",
                  "parentUUID": "8796aa5c-33e6-42b2-9f87-9c1ca6a9e089",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6da6373-a30d-46ba-bc24-53e951bd2cf3",
                "407823fe-e371-457e-b93d-ea71596fa8f8",
                "54a2b6e4-b126-4168-8efa-3e3122b37246"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e132b634-a943-4291-81f5-a0ec75b6ab6e",
              "title": "Testing Post service : ",
              "fullFile": "D:\\Reflektion\\Test\\TestAPI.js",
              "file": "\\Test\\TestAPI.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Task 1 = Verify Post service for /post URI",
                  "fullTitle": "Task : API Testing Testing Post service :  Task 1 = Verify Post service for /post URI",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .post('/posts')\n            .set('content-type','application/json')\n            .send({\n                \"title\": 'abc',\n                \"body\": 'xyz',\n                \"userId\":'1',\n            })\n            .expect(201) // Verify the response status code = 201\n            .end(function(err,res){\n                if(!err){\n                    // verify the schema & verify the record created \n                    chai.expect(res.body).to.have.all.keys('userId','id','title','body')\n                    chai.expect(res.body).to.have.property(\"title\", 'abc')\n                    chai.expect(res.body).to.have.property(\"body\", 'xyz')\n                    chai.expect(res.body).to.have.property(\"userId\",'1')\n                }\n                else\n                {\n                    console.log(err)\n                }\n            })",
                  "err": {},
                  "uuid": "a34a9f34-dfe3-421a-b507-c4563e3e8f6e",
                  "parentUUID": "e132b634-a943-4291-81f5-a0ec75b6ab6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a34a9f34-dfe3-421a-b507-c4563e3e8f6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "490c3bc4-2904-4de1-9f58-8cc3ae690433",
              "title": "Testing Put service : ",
              "fullFile": "D:\\Reflektion\\Test\\TestAPI.js",
              "file": "\\Test\\TestAPI.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Task 1 = Verify Put service for /posts/1 URI",
                  "fullTitle": "Task : API Testing Testing Put service :  Task 1 = Verify Put service for /posts/1 URI",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .put('/posts/1')\n            .set('content-type','application/json')\n            .send({\n                \"id\":1,\n                \"title\": 'abc',\n                \"body\": 'xyz',\n                \"userId\":'1',\n            })\n            .expect(200) // Verify the response status code = 200\n            .end(function(err,res){\n                if(!err){\n                    // verify the schema & verify the record created \n                    chai.expect(res.body).to.have.all.keys('userId','id','title','body')\n                    chai.expect(res.body).to.have.property(\"title\", 'abc')\n                    chai.expect(res.body).to.have.property(\"body\", 'xyz')\n                    chai.expect(res.body).to.have.property(\"userId\",'1')\n                    chai.expect(res.body).to.have.property(\"id\",1)\n                }\n                else\n                {\n                    console.log(err)\n                }\n            })",
                  "err": {},
                  "uuid": "39677b32-d0f7-4595-afe5-99887c1dce1b",
                  "parentUUID": "490c3bc4-2904-4de1-9f58-8cc3ae690433",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39677b32-d0f7-4595-afe5-99887c1dce1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7da97bba-147d-4fde-b28c-a0ce820de0a8",
              "title": "Testing Delete service : ",
              "fullFile": "D:\\Reflektion\\Test\\TestAPI.js",
              "file": "\\Test\\TestAPI.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Task 1 = Verify Delete service for /posts/1 URI",
                  "fullTitle": "Task : API Testing Testing Delete service :  Task 1 = Verify Delete service for /posts/1 URI",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "server\n            .delete('/posts/1')\n            .expect(200) // Verify the response status code = 200\n            .end(function(err,res){\n                if(!err){\n                    //log respose\n                    chai.expect(res.body).to.be.empty\n                }\n                else\n                {\n                    console.log(err)\n                }\n            })",
                  "err": {},
                  "uuid": "9e6a1f35-b584-43d1-bf97-719357c7d857",
                  "parentUUID": "7da97bba-147d-4fde-b28c-a0ce820de0a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e6a1f35-b584-43d1-bf97-719357c7d857"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}